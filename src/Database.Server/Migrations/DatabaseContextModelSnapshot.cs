// <auto-generated />
using System;
using System.Collections.Generic;
using Database.Server;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Server.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Database.Server.DbEntities.DatabaseVersionsDbEntity", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("database_versions", "main");
                });

            modelBuilder.Entity("Database.Server.DbEntities.DependenciesDbEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("DependencyGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("dependency_guid");

                    b.Property<Guid>("FixGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("fix_guid");

                    b.HasKey("Id");

                    b.HasIndex("DependencyGuid");

                    b.HasIndex("FixGuid");

                    b.ToTable("dependencies", "main");
                });

            modelBuilder.Entity("Database.Server.DbEntities.FileFixesDbEntity", b =>
                {
                    b.Property<Guid>("FixGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("fix_guid");

                    b.Property<string>("ConfigFile")
                        .HasColumnType("text")
                        .HasColumnName("config_file");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<List<string>>("FilesToBackup")
                        .HasColumnType("text[]")
                        .HasColumnName("files_to_backup");

                    b.Property<List<string>>("FilesToDelete")
                        .HasColumnType("text[]")
                        .HasColumnName("files_to_delete");

                    b.Property<List<string>>("FilesToPatch")
                        .HasColumnType("text[]")
                        .HasColumnName("files_to_patch");

                    b.Property<string>("InstallFolder")
                        .HasColumnType("text")
                        .HasColumnName("install_folder");

                    b.Property<string>("MD5")
                        .HasColumnType("text")
                        .HasColumnName("file_md5");

                    b.Property<string>("RunAfterInstall")
                        .HasColumnType("text")
                        .HasColumnName("run_after_install");

                    b.Property<Guid?>("SharedFixGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("shared_fix_guid");

                    b.Property<string>("SharedFixInstallFolder")
                        .HasColumnType("text")
                        .HasColumnName("shared_fix_install_folder");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("download_url");

                    b.Property<List<string>>("Variants")
                        .HasColumnType("text[]")
                        .HasColumnName("variants");

                    b.Property<List<string>>("WineDllOverrides")
                        .HasColumnType("text[]")
                        .HasColumnName("wine_dll_overrides");

                    b.HasKey("FixGuid");

                    b.HasIndex("SharedFixGuid");

                    b.ToTable("file_fixes", "main");
                });

            modelBuilder.Entity("Database.Server.DbEntities.FixTypesDbEntity", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("fix_types", "main");
                });

            modelBuilder.Entity("Database.Server.DbEntities.FixesDbEntity", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("guid");

                    b.Property<string>("Changelog")
                        .HasColumnType("text")
                        .HasColumnName("changelog");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<byte>("FixType")
                        .HasColumnType("smallint")
                        .HasColumnName("fix_type_id");

                    b.Property<int>("GameId")
                        .HasColumnType("integer")
                        .HasColumnName("game_id");

                    b.Property<int>("Installs")
                        .HasColumnType("integer")
                        .HasColumnName("installs");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disabled");

                    b.Property<bool>("IsLinuxSupported")
                        .HasColumnType("boolean")
                        .HasColumnName("is_linux_supported");

                    b.Property<bool>("IsWindowsSupported")
                        .HasColumnType("boolean")
                        .HasColumnName("is_windows_supported");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<int>("TableVersion")
                        .HasColumnType("integer")
                        .HasColumnName("table_version");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Guid");

                    b.HasIndex("FixType");

                    b.HasIndex("GameId");

                    b.HasIndex("IsDisabled");

                    b.HasIndex("TableVersion");

                    b.ToTable("fixes", "main");
                });

            modelBuilder.Entity("Database.Server.DbEntities.GamesDbEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("games", "main");
                });

            modelBuilder.Entity("Database.Server.DbEntities.HostsFixesDbEntity", b =>
                {
                    b.Property<Guid>("FixGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("fix_guid");

                    b.Property<List<string>>("Entries")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("entries");

                    b.HasKey("FixGuid");

                    b.ToTable("hosts_fixes", "main");
                });

            modelBuilder.Entity("Database.Server.DbEntities.NewsDbEntity", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<int>("TableVersion")
                        .HasColumnType("integer")
                        .HasColumnName("table_version");

                    b.HasKey("Date");

                    b.HasIndex("TableVersion");

                    b.ToTable("news", "main");
                });

            modelBuilder.Entity("Database.Server.DbEntities.RegistryFixesDbEntity", b =>
                {
                    b.Property<Guid>("FixGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("fix_guid");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("NewValueData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("new_value_data");

                    b.Property<string>("ValueName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value_name");

                    b.Property<byte>("ValueType")
                        .HasColumnType("smallint")
                        .HasColumnName("value_type_id");

                    b.HasKey("FixGuid");

                    b.HasIndex("ValueType");

                    b.ToTable("registry_fixes", "main");
                });

            modelBuilder.Entity("Database.Server.DbEntities.RegistryValueTypesDbEntity", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("registry_value_types", "main");
                });

            modelBuilder.Entity("Database.Server.DbEntities.ReportsDbEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("FixGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("fix_guid");

                    b.Property<string>("ReportText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex("FixGuid");

                    b.ToTable("reports", "main");
                });

            modelBuilder.Entity("Database.Server.DbEntities.TagsDbEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tag");

                    b.HasKey("Id");

                    b.HasIndex("Tag")
                        .IsUnique();

                    b.ToTable("tags", "main");
                });

            modelBuilder.Entity("Database.Server.DbEntities.TagsListsDbEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("FixGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("fix_guid");

                    b.Property<int>("TagId")
                        .HasColumnType("integer")
                        .HasColumnName("tag_id");

                    b.HasKey("Id");

                    b.HasIndex("FixGuid");

                    b.HasIndex("TagId");

                    b.ToTable("tags_lists", "main");
                });

            modelBuilder.Entity("Database.Server.DbEntities.DependenciesDbEntity", b =>
                {
                    b.HasOne("Database.Server.DbEntities.FixesDbEntity", "FixesTable2")
                        .WithMany()
                        .HasForeignKey("DependencyGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Server.DbEntities.FixesDbEntity", "FixesTable")
                        .WithMany()
                        .HasForeignKey("FixGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FixesTable");

                    b.Navigation("FixesTable2");
                });

            modelBuilder.Entity("Database.Server.DbEntities.FileFixesDbEntity", b =>
                {
                    b.HasOne("Database.Server.DbEntities.FixesDbEntity", "FixesTable")
                        .WithMany()
                        .HasForeignKey("FixGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Server.DbEntities.FixesDbEntity", "FixesTable2")
                        .WithMany()
                        .HasForeignKey("SharedFixGuid");

                    b.Navigation("FixesTable");

                    b.Navigation("FixesTable2");
                });

            modelBuilder.Entity("Database.Server.DbEntities.FixesDbEntity", b =>
                {
                    b.HasOne("Database.Server.DbEntities.FixTypesDbEntity", "FixTypesTable")
                        .WithMany()
                        .HasForeignKey("FixType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Server.DbEntities.GamesDbEntity", "GameTable")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FixTypesTable");

                    b.Navigation("GameTable");
                });

            modelBuilder.Entity("Database.Server.DbEntities.HostsFixesDbEntity", b =>
                {
                    b.HasOne("Database.Server.DbEntities.FixesDbEntity", "FixesTable")
                        .WithMany()
                        .HasForeignKey("FixGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FixesTable");
                });

            modelBuilder.Entity("Database.Server.DbEntities.RegistryFixesDbEntity", b =>
                {
                    b.HasOne("Database.Server.DbEntities.FixesDbEntity", "FixesTable")
                        .WithMany()
                        .HasForeignKey("FixGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Server.DbEntities.RegistryValueTypesDbEntity", "RegistryValueTypesTable")
                        .WithMany()
                        .HasForeignKey("ValueType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FixesTable");

                    b.Navigation("RegistryValueTypesTable");
                });

            modelBuilder.Entity("Database.Server.DbEntities.ReportsDbEntity", b =>
                {
                    b.HasOne("Database.Server.DbEntities.FixesDbEntity", "FixesTable")
                        .WithMany()
                        .HasForeignKey("FixGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FixesTable");
                });

            modelBuilder.Entity("Database.Server.DbEntities.TagsListsDbEntity", b =>
                {
                    b.HasOne("Database.Server.DbEntities.FixesDbEntity", "FixesTable")
                        .WithMany()
                        .HasForeignKey("FixGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Server.DbEntities.TagsDbEntity", "TagsTable")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FixesTable");

                    b.Navigation("TagsTable");
                });
#pragma warning restore 612, 618
        }
    }
}
